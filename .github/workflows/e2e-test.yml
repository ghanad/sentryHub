name: End-to-End Tests

on:
  push:
    branches: [ "master"]
  pull_request:
    branches: [ "master"]

jobs:
  e2e-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: sentryhub_user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: sentryhub_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
        options: --health-cmd "rabbitmq-diagnostics -q ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install development/test dependencies
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # Ensure pika and flask are installed even if not in a dev file
          pip install pika flask

      - name: Run Database Migrations
        env:
          # --- Configure environment for Django ---
          PYTHONPATH: ${{ github.workspace }}
          SECRET_KEY: "ci-secret-key"
          DEBUG: "True"
          # Database settings
          DB_ENGINE: "django.db.backends.postgresql"
          DB_NAME: "sentryhub_test"
          DB_USER: "sentryhub_user"
          DB_PASSWORD: "password"
          DB_HOST: "localhost"
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          # Redis/Celery settings
          CELERY_BROKER_URL: "redis://localhost:${{ job.services.redis.ports[6379] }}/0"
          CELERY_RESULT_BACKEND: "redis://localhost:${{ job.services.redis.ports[6379] }}/0"
          # RabbitMQ settings
          RABBITMQ_HOST: "localhost"
          RABBITMQ_PORT: ${{ job.services.rabbitmq.ports[5672] }}
          RABBITMQ_USER: "guest"
          RABBITMQ_PASSWORD: "guest"
        run: |
          python manage.py migrate

      - name: Run Background Processes & E2E Test
        env:
          # --- Pass all environment variables again ---
          PYTHONPATH: ${{ github.workspace }}
          SECRET_KEY: "ci-secret-key"
          DEBUG: "True"
          DB_ENGINE: "django.db.backends.postgresql"
          DB_NAME: "sentryhub_test"
          DB_USER: "sentryhub_user"
          DB_PASSWORD: "password"
          DB_HOST: "localhost"
          DB_PORT: ${{ job.services.postgres.ports[5432] }}
          CELERY_BROKER_URL: "redis://localhost:${{ job.services.redis.ports[6379] }}/0"
          CELERY_RESULT_BACKEND: "redis://localhost:${{ job.services.redis.ports[6379] }}/0"
          RABBITMQ_HOST: "localhost"
          RABBITMQ_PORT: ${{ job.services.rabbitmq.ports[5672] }}
          RABBITMQ_USER: "guest"
          RABBITMQ_PASSWORD: "guest"
          # --- Mock external services ---
          SLACK_INTERNAL_ENDPOINT: "http://localhost:5001/slack"
          JIRA_SERVER_URL: "http://localhost:5001/jira" 
        run: |
          # Start a mock server for Slack/Jira in the background
          python tests/e2e/mock_server.py &
          
          # Start the RabbitMQ consumer in the background
          python manage.py consume_rabbitmq_alerts &
          
          # Start the Celery worker in the background
          celery -A sentryHub worker --loglevel=info &
          
          # Give background processes a moment to start up
          echo "Waiting for background services to initialize..."
          sleep 15
          
          # Run the actual E2E test script
          echo "Running E2E test script..."
          python tests/e2e/run_test.py